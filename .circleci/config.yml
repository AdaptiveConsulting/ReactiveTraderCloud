version: 2.1

references:
  push_images_list: &push_images_list
    client pricehistory bot nlp servers broker eventstore nginx

commands:

  # rewriting internal 'checkout' command to solve the issue with triggering forked PRs build with API
  checkout:
    steps:
      - run:
          name: Set up HOME environment variable
          command: |
            # Workaround old docker images with incorrect $HOME
            # check https://github.com/docker/docker/issues/2968 for details
            if [ "${HOME}" = "/" ]
            then
              export HOME=$(getent passwd $(id -un) | cut -d: -f6)
            fi

      - run:
          name: Set up SSH access
          command: |
            mkdir -p ~/.ssh

            echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
            bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
            ' >> ~/.ssh/known_hosts

            (umask 077; touch ~/.ssh/id_rsa)
            chmod 0600 ~/.ssh/id_rsa
            (cat $CHECKOUT_KEY > ~/.ssh/id_rsa)

      - run:
          name: Set up git configuration
          command: |
            # use git+ssh instead of https
            git config --global url."ssh://git@github.com".insteadOf "https://github.com" || true
            git config --global gc.auto 0 || true

      - run:
          name: Set up git repository
          command: |
            if [ -e /home/circleci/project/.git ]
            then
                cd /home/circleci/project
                git remote set-url origin "$CIRCLE_REPOSITORY_URL" || true
            else
                mkdir -p /home/circleci/project
                cd /home/circleci/project
                git clone "$CIRCLE_REPOSITORY_URL" .
             fi

      - run:
          name: Fetch git origin remote
          command: |
            if [ -n "$CIRCLE_TAG" ]
            then
              git fetch --force origin "refs/tags/${CIRCLE_TAG}"
            elif [[ "$CIRCLE_BRANCH" =~ ^pull\/* ]]
            then
              # For PR from Fork

              # This is a fix for an edge case:
              # We always need to trigger a build on all PRs once we have a new commit in master. We use CircleCi API to trigger
              # those builds (see a job "notify_about_merge_to_master"). That job uses a branch name for opened PR
              # to trigger the build. But there is a special case for PRs raised from forks - there are no branch names that
              # builds can be identified with (since branches are in forks), so CircleCi crates a special branch for them in
              # format "pull/123". Then we use such number in CircleCi API to trigger a build on those PRs.
              # (see a job "notify_about_merge_to_master")
              # Unfortunately it looks like there is a bug in CircleCi API:
              # their API does not allow to trigger builds for fork PRs (where branch is "pull/123").
              # We found that instead of calling API with "pull/123", we need to call it with "pull/123/head" - then the
              # build can be triggered. This looks great, but then unfortunately such build fails on the step where CircleCi
              # checks out the code from the repo. It says that it can't find a branch with name "pull/123/head/head" -
              # clearly it adds "head" into the branch name that we passed to it with API ("pull/123/head" + "/head").
              # So the trick here is next: before checking out the code, validate the environment variable
              # "CIRCLE_BRANCH" to make sure it does not have "head" in the end, so turn "pull/123/head" into "pull/123"
              echo "Value of CIRCLE_BRANCH env var for current pull request branch: " $CIRCLE_BRANCH
              CLEAN_PR_BRANCH_NAME=$( grep -oP "(?=pull\/).*(?=\/head)" \<<< $CIRCLE_BRANCH ) || true
              echo "Fixing branch name: " $CIRCLE_BRANCH " => " $CLEAN_PR_BRANCH_NAME

              git fetch --force origin "$CLEAN_PR_BRANCH_NAME/head:remotes/origin/$CLEAN_PR_BRANCH_NAME"
            else
               git fetch --force origin "$CIRCLE_BRANCH:remotes/origin/$CIRCLE_BRANCH"
            fi

      - run:
          name: Checkout branch
          command: |
            if [ -n "$CIRCLE_TAG" ]
            then
              git reset --hard "$CIRCLE_SHA1"
              git checkout -q "$CIRCLE_TAG"
            elif [ -n "$CIRCLE_BRANCH" ]
            then
              git reset --hard "$CIRCLE_SHA1"
              git checkout -q -B "$CIRCLE_BRANCH"
            fi

            git reset --hard "$CIRCLE_SHA1"

  setup_env:
    steps:
      - run:
          name: Install tools
          command: |
            sudo npm i -g semver@6.3.0
            sudo apt-get install gettext-base
      - run:
          name: Setup git
          command: |
            git config --global user.email "${GIT_AUTHOR_NAME}"
            git config --global user.name “${GIT_EMAIL}”
      - run:
          name: Default docker user
          command: |
            # For fork PRs set the docker user to adaptive
            echo "export DOCKER_USER=${DOCKER_USER:-adaptive}" >> $BASH_ENV
      - add_ssh_keys:
          # For push commands pack to github
          fingerprints:
            - "79:e8:92:e2:cb:49:2b:26:2d:d5:f9:6f:7b:f7:46:b6"

  semver:
    description: "Setup semver version for this release"
    parameters:
      bump:
        default: "minor"
        description: The semver bump type. Must be one of "major", "minor", "patch".
        type: enum
        enum: ["major", "minor", "patch", "prerelease"]
    steps:
      - run:
          name: Semver Versioning "<< parameters.bump >>"
          command: |
            PREVIOUS_TAG="$(semver $(git tag --merged) 1.0.0 | tail -n -1)"
            NEW_TAG="$(semver -i << parameters.bump >> ${PREVIOUS_TAG})"
            echo "export BUILD_VERSION=$NEW_TAG" >> $BASH_ENV
            git tag $NEW_TAG -a -m "v$NEW_TAG"
            echo "Created new tag: $(git describe --abbr=0)"

  build_images:
    description: "Build the deployable container images"
    steps:
      - run:
          name: Build Images
          command: docker-compose -f ./src/docker-compose.yml -f ./src/docker-compose.deploy.yml build

  setup_initial_currency_data:
    steps:
      - run:
          name: Setup initial currencies
          command: |
            # The eventstore should have a clean set of data, which is populated via the servers
            docker-compose -f src/docker-compose.yml run servers
            docker commit eventstore_base ${DOCKER_USER}/eventstore:${BUILD_VERSION}

  run_tests:
    description: "Runs the integration tests"
    steps:
      - run:
          name: Integration Tests
          command: docker-compose -f ./src/docker-compose.e2e.yml -f ./src/docker-compose.yml run integration
      - run:
          name: e2e Tests
          command: docker-compose -f ./src/docker-compose.e2e.yml -f ./src/docker-compose.yml run e2e

  list_images:
    steps:
      - run:
          name: List images
          command: docker images -a

  push_images:
    parameters:
      images:
        type: string
    steps:
      - run:
          name: Push Images
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            docker-compose \
              -f src/docker-compose.deploy.yml -f src/docker-compose.yml \
              push << parameters.images >>
            echo "Pushing new tag to remote"
            git push origin $BUILD_VERSION

  deploy_to_environment:
    description: "Deploy the specific version to gcloud"
    parameters:
      version:
        description: The environment variable specifiying the version to deploy. Must already be hosted on dockerhub
        type: env_var_name
      environment:
        description: The environment variable containing the environment to deploy to. One of "dev", "demo"
        type: env_var_name
    steps:
      - run:
          name: "Deployment information"
          command: |
            echo "Deploying $BUILD_VERSION -> $DEPLOY_TARGET"
      - run:
          name: Authenticate with gcloud
          command: |
            echo $BASH_ENV
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud config set project ${GOOGLE_PROJECT_ID}
            gcloud config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud container clusters get-credentials cluster
      - run:
          name: Updating deployment definition to new images
          command: |
            # TODO: create new environment automatically
            # Update/create each deployment file in src/services/kubernetes
            for f in ./src/services/kubernetes/*-deployment.yaml; do
                cat $f | /usr/bin/envsubst | kubectl --namespace=${<< parameters.environment >>} apply -f -
            done

  main_pipeline:
    description: "Main pipeline"
    parameters:
      rebase_with_master:
        type: boolean
        default: false
      bump:
        description: The semver bump type. Must be one of "major", "minor", "patch".
        type: enum
        enum: ["major", "minor", "patch", "prerelease"]
      environment:
        type: string
    steps:
      - setup_remote_docker
      - setup_env
      - checkout
      - when:
          condition: <<parameters.rebase_with_master>>
          steps:
            - run:
                name: Rebase with master
                command: |
                  git rebase origin master
      - semver:
          bump: << parameters.bump >>
      - run:
          name: Set up persisted variables
          command: |
            mkdir -p ~/vars
            echo "export DEPLOY_TARGET=<< parameters.environment >>" >> ~/vars/env
            echo "export BUILD_VERSION=$BUILD_VERSION" >> ~/vars/env
      - persist_to_workspace:
          root: ~/
          paths: vars/env
      - build_images
      - setup_initial_currency_data
      - list_images
      - run_tests


jobs:
  release_build:
    docker:
      - image: circleci/node:latest
    steps:
      - main_pipeline:
          bump: minor
          environment: dev
      - push_images:
          images: *push_images_list

  patch_build:
    docker:
      - image: circleci/node:latest
    steps:
      - main_pipeline:
          bump: patch
          environment: none
      - push_images:
          images: *push_images_list

  feature_build:
    docker:
      - image: circleci/node:latest
    steps:
      - main_pipeline:
          bump: prerelease
          environment: none
          rebase_with_master: true

  notify_about_merge_to_master:
    docker:
      - image: circleci/node:latest
    steps:
      - run:
          name: "Trigger build on branches with PRs (because master had a commit)"
          command: |
            TARGET_USER="AdaptiveConsulting"
            TARGET_BRANCH="master"

            # Fetching info about opened pull requests (using github API)
            pr_info=$(curl https://api.github.com/repos/AdaptiveConsulting/ReactiveTraderCloud/pulls\?state=open\?access_token\=${GIT_API_USER_TOKEN})

            # Extracting branch names from info about PRs. This info has branch names for opened PRs,
            # the format is: ` "label": "user:branch-name" `.
            # To extract branch names, we need to remove the string `user:`, remove the string `"label":` and some other extra symbols
            # and then we need to exclude duplicated records:
            PR_BRANCHES=$( grep -oP "(?<=\"label\": \"${TARGET_USER}:).*?(?=\")" \<<< $pr_info | sort -u || true) || true

            if [ -z "$PR_BRANCHES" ]; then
              echo "Exiting - no branches with opened PRs"
              exit 0
            fi

            # Now iterate on branches that have opened PRs and for each of them invoke a new build using
            # Circle CI API (v2): https://github.com/CircleCI-Public/api-preview-docs/blob/master/docs/api-changes.md
            for branch in $PR_BRANCHES
            do
              if [ "$branch" != $TARGET_BRANCH ]; then
                echo "Triggering build on branch: ${branch}"
                echo "\"branch\": \"${branch}\""
                     curl -u ${CIRCLE_API_USER_TOKEN}: -X POST --header "Content-Type: application/json" -d "{
                       \"branch\": \"${branch}\"
                     }" https://circleci.com/api/v2/project/github/AdaptiveConsulting/ReactiveTraderCloud/pipeline
              fi
            done

  deploy_last_build:
    docker:
      - image: google/cloud-sdk
    steps:
      - attach_workspace:
          at: ~/
      - checkout
      - run:
          name: "Install required OS dependencies"
          command: |
            apt-get install gettext -qy
      - run:
          name: "Retrieve deployment parameters"
          command: |
            source ~/vars/env
            echo "Loaded deploy params from last release_build."
            echo "BUILD_VERSION=$BUILD_VERSION"
            echo "DEPLOY_TARGET=$DEPLOY_TARGET"
            echo "export BUILD_VERSION=$BUILD_VERSION" >> $BASH_ENV
            echo "export DEPLOY_TARGET=$DEPLOY_TARGET" >> $BASH_ENV
      - deploy_to_environment:
          version: BUILD_VERSION
          environment: DEPLOY_TARGET

  deploy_version_from_env_tag:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run:
          name: "Install required OS dependencies"
          command: |
            apt-get install gettext -qy
      - run:
          name: "Parse tags"
          command: |
            echo "Parsing current commit tags. Looking for version and requested environment."

            echo "Environment is found via env-* tags"
            ENVIRONMENT_TAG=$(git tag -l --points-at HEAD env-*)
            DEPLOY_TARGET=${ENVIRONMENT_TAG/env-/}
            echo "DEPLOY_TARGET: $DEPLOY_TARGET"

            echo "Build version is found via semver tag"
            BUILD_VERSION=$(git tag -l --points-at HEAD | grep ^[0-9+]\.)
            echo "BUILD_VERSION: $BUILD_VERSION"

            if [[ "$BUILD_VERSION" = "" ]] ; then
                echo "Could not find a valid version on this commit. Was the semver tag on the same tag as the env-* one?"
                circleci-agent step halt
            fi

            echo "export BUILD_VERSION=$BUILD_VERSION" >> $BASH_ENV
            echo "export DEPLOY_TARGET=$DEPLOY_TARGET" >> $BASH_ENV
      - deploy_to_environment:
          version: BUILD_VERSION
          environment: DEPLOY_TARGET

workflows:
  version: 2.1
  main:
    jobs:
      - patch_build:
          filters:
            branches:
              only: /^release\/.*/

      - release_build:
          filters:
            branches:
              only: master

      - deploy_last_build:
          requires:
            - release_build
          filters:
            branches:
              only: master

      - notify_about_merge_to_master:
          filters:
            branches:
              only: master

      - feature_build:
          filters:
            branches:
              ignore:
                - master
                - /^release\/.*/

      - deploy_version_from_env_tag:
          filters:
            branches:
              ignore: /.*/  # only run on matching tag
            tags:
              only: /^env-.*/
