version: 2
jobs:
  build_and_test:
    machine:
      enabled: true
    steps:
      - checkout
      - run:
          name: Create network
          command: 'docker network create -d bridge circleci'
      - run:
          name: Build client
          command: 'cd ./src/client  && docker build -t ${DOCKER_USER}/client:${CIRCLE_BUILD_NUM} .'
      - run:
          name: Build servers
          command: 'cd ./src/server && docker build -t ${DOCKER_USER}/servers:${CIRCLE_BUILD_NUM} .'
      - run:
          name: Build nginx
          command: 'cd ./src/services/nginx  && docker build -t ${DOCKER_USER}/nginx:${CIRCLE_BUILD_NUM} .'
      - run:
          name: Build broker
          command: 'cd ./src/services/broker  && docker build -t ${DOCKER_USER}/broker:${CIRCLE_BUILD_NUM} .'
      - run:
          name: Build eventstore
          command: 'cd ./src/services/eventstore  && docker build -t ${DOCKER_USER}/baseeventstore .'
      - run:
          name: Run broker
          command: 'docker run -d --net circleci --name broker ${DOCKER_USER}/broker:${CIRCLE_BUILD_NUM}'
      - run:
          name: Run eventstore
          command: 'docker run -d --net circleci --name eventstore ${DOCKER_USER}/baseeventstore'
      - run:
          name: Populate eventstore
          command: 'docker run --net circleci --name servers ${DOCKER_USER}/servers:${CIRCLE_BUILD_NUM} dotnet ./Adaptive.ReactiveTrader.Server.Launcher.dll config.prod.json --populate-eventstore'
      - run:
          name: Save eventstore
          command: 'docker commit eventstore ${DOCKER_USER}/eventstore:${CIRCLE_BUILD_NUM}'
      - run:
          name: Run analytics
          command: 'docker run -d --net circleci --name analytics ${DOCKER_USER}/servers:${CIRCLE_BUILD_NUM} dotnet ./Adaptive.ReactiveTrader.Server.Analytics.dll config.prod.json'
      - run:
          name: Run pricing
          command: 'docker run -d --net circleci --name pricing ${DOCKER_USER}/servers:${CIRCLE_BUILD_NUM} dotnet ./Adaptive.ReactiveTrader.Server.Pricing.dll config.prod.json'
      - run:
          name: Run referencedataread
          command: 'docker run -d --net circleci --name referencedataread ${DOCKER_USER}/servers:${CIRCLE_BUILD_NUM} dotnet ./Adaptive.ReactiveTrader.Server.ReferenceDataRead.dll config.prod.json'
      - run:
          name: Run tradeexecution
          command: 'docker run -d --net circleci --name tradeexecution ${DOCKER_USER}/servers:${CIRCLE_BUILD_NUM} dotnet ./Adaptive.ReactiveTrader.Server.TradeExecution.dll config.prod.json'
      - run:
          name: Run blotter
          command: 'docker run -d --net circleci --name blotter ${DOCKER_USER}/servers:${CIRCLE_BUILD_NUM} dotnet ./Adaptive.ReactiveTrader.Server.Blotter.dll config.prod.json'
      - run:
          name: Run nginx
          command: 'docker run -d --net circleci -p 80:80 --name nginx ${DOCKER_USER}/nginx:${CIRCLE_BUILD_NUM}'
      - run:
          name: Run client
          command: 'docker run -d --net circleci --name client ${DOCKER_USER}/client:${CIRCLE_BUILD_NUM}'
      - run:
          name: List containers
          command: 'docker ps'
      - run:
          name: Print container logs
          command: 'docker ps -q -a | xargs -t -L 1 docker logs'
      - run:
          name: Run server tests
          command: 'docker run --net circleci --name tests ${DOCKER_USER}/servers:${CIRCLE_BUILD_NUM} dotnet vstest ./Adaptive.ReactiveTrader.Server.IntegrationTests.dll'
      - run:
          name: Build client tests
          command: 'cd ./src/client && docker build -t ${DOCKER_USER}/client-test${CIRCLE_BUILD_NUM} -f ./Dockerfile.dev .'
      - run:
          name: Run client tests
          command: 'docker run ${DOCKER_USER}/client-test${CIRCLE_BUILD_NUM} npm run test -- --coverage'
      - run:
          name: Push images to dockerhub
          command:
            'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin &&
            docker push ${DOCKER_USER}/client:${CIRCLE_BUILD_NUM} &&
            docker push ${DOCKER_USER}/servers:${CIRCLE_BUILD_NUM} &&
            docker push ${DOCKER_USER}/broker:${CIRCLE_BUILD_NUM} &&
            docker push ${DOCKER_USER}/eventstore:${CIRCLE_BUILD_NUM} &&
            docker push ${DOCKER_USER}/nginx:${CIRCLE_BUILD_NUM}'
      - run:
          name: Store build number
          command: |
            mkdir -p envs
            echo "export BUILD_NUM=${CIRCLE_BUILD_NUM}" >> envs/env_build_num
      - persist_to_workspace:
          root: envs
          paths:
            - env_build_num

  deploy:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - attach_workspace:
          at: /envs
      - run:
          name: Restore build number
          command: cat /envs/env_build_num >> $BASH_ENV;
      - run:
          name: Authenticate with gcloud
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud config set project ${GOOGLE_PROJECT_ID}
            gcloud config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud container clusters get-credentials cluster
      - run:
          name: Set namespace
          command: declare -A envs=( ["develop"]="dev" ["master"]="demo"); echo "export NAMESPACE='${envs[$CIRCLE_BRANCH]}'" >> $BASH_ENV;
      - run:
          name: Update images
          command: |
            kubectl --namespace=${NAMESPACE} set image deployments/broker-deployment broker=${DOCKER_USER}/broker:${BUILD_NUM} 
            kubectl --namespace=${NAMESPACE} set image deployments/eventstore-deployment eventstore=${DOCKER_USER}/eventstore:${BUILD_NUM} 
            kubectl --namespace=${NAMESPACE} set image deployments/web-deployment web=${DOCKER_USER}/nginx:${BUILD_NUM}
            kubectl --namespace=${NAMESPACE} set image deployments/client-deployment client=${DOCKER_USER}/client:${BUILD_NUM} 
            kubectl --namespace=${NAMESPACE} set image deployments/referencedataread-deployment referencedataread=${DOCKER_USER}/servers:${BUILD_NUM}
            kubectl --namespace=${NAMESPACE} set image deployments/pricing-deployment pricing=${DOCKER_USER}/servers:${BUILD_NUM}
            kubectl --namespace=${NAMESPACE} set image deployments/tradeexecution-deployment tradeexecution=${DOCKER_USER}/servers:${BUILD_NUM}
            kubectl --namespace=${NAMESPACE} set image deployments/analytics-deployment analytics=${DOCKER_USER}/servers:${BUILD_NUM}
            kubectl --namespace=${NAMESPACE} set image deployments/blotter-deployment blotter=${DOCKER_USER}/servers:${BUILD_NUM}
            kubectl --namespace=${NAMESPACE} set image deployments/tradeexecution-deployment tradeexecution=${DOCKER_USER}/servers:${BUILD_NUM}

workflows:
  version: 2
  main:
    jobs:
      - build_and_test
      - deploy:
          requires:
            - build_and_test
          filters:
            branches:
              only:
                - master
                - develop
