version: 2.1

jobs:
  build:
    docker: 
      - image: circleci/node:latest
    steps:
      - checkout # check out the code in the project directory
      - run: echo "hello world" # run the `echo` command

# references:
#   push_images_list: &push_images_list
#     client pricehistory bot nlp openfinconfig servers broker eventstore nginx

# commands:
#   setup_env:
#     steps:
#       - run:
#           name: Install tools
#           command: |
#             sudo apt-get install gettext-base
#             sudo apt-get install jq
#       - run:
#           name: Setup git
#           command: |
#             git config --global user.email "${GIT_EMAIL}"
#             git config --global user.name “${GIT_AUTHOR_NAME}”
#       - run:
#           name: Default docker user
#           command: |
#             # For fork PRs set the docker user to adaptive
#             echo "export DOCKER_USER=${DOCKER_USER:-adaptive}" >> $BASH_ENV
#       - add_ssh_keys:
#           # For push commands pack to github
#           fingerprints:
#             - "79:e8:92:e2:cb:49:2b:26:2d:d5:f9:6f:7b:f7:46:b6"

#   set_version:
#     description: "Set the version for this release by using git describe"
#     steps:
#       - run:
#           name: Set version
#           command: |
#             GIT_VERSION="$(git describe)"
#             echo "Build version based on git describe: $GIT_VERSION"
#             echo "export BUILD_VERSION=$GIT_VERSION" >> $BASH_ENV

#   build_images:
#     description: "Build the deployable container images"
#     steps:
#       - run:
#           name: Build Images
#           command: docker-compose -f ./src/docker-compose.yml -f ./src/docker-compose.deploy.yml build --parallel

#   setup_initial_currency_data:
#     steps:
#       - run:
#           name: Setup initial currencies
#           command: |
#             # The eventstore should have a clean set of data, which is populated via the servers
#             docker-compose -f src/docker-compose.yml run servers
#             docker commit eventstore_base ${DOCKER_USER}/eventstore:${BUILD_VERSION}

#   run_tests:
#     description: "Runs the integration tests"
#     steps:
#       - run:
#           name: Integration Tests
#           command: docker-compose -f ./src/docker-compose.e2e.yml -f ./src/docker-compose.yml run integration
#       - run:
#           name: e2e Tests
#           command: docker-compose -f ./src/docker-compose.e2e.yml -f ./src/docker-compose.yml run e2e

#   list_images:
#     steps:
#       - run:
#           name: List images
#           command: docker images -a

#   push_images:
#     parameters:
#       images:
#         type: string
#     steps:
#       - run:
#           name: Push Images
#           command: |
#             echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
#             docker-compose \
#               -f src/docker-compose.deploy.yml -f src/docker-compose.yml \
#               push << parameters.images >>

#   deploy_to_environment:
#     description: "Deploy the specific version to gcloud"
#     parameters:
#       version:
#         description: The environment variable specifiying the version to deploy. Must already be hosted on dockerhub
#         type: env_var_name
#       environment:
#         description: The environment variable containing the environment to deploy to. One of "dev", "demo"
#         type: env_var_name
#     steps:
#       - run:
#           name: "Deployment information"
#           command: |
#             echo "Deploying $BUILD_VERSION -> $DEPLOY_TARGET"
#       - run:
#           name: Authenticate with gcloud
#           command: |
#             echo $BASH_ENV
#             echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
#             gcloud config set project ${GOOGLE_PROJECT_ID}
#             gcloud config set compute/zone ${GOOGLE_COMPUTE_ZONE}
#             gcloud container clusters get-credentials cluster
#       - run:
#           name: Downscale all deployments
#           command: |
#             kubectl -n ${<< parameters.environment >>} scale deploy --replicas=0 --all
#       - run:
#           name: Updating deployment definition to new images
#           command: |
#             # TODO: create new environment automatically
#             # Update/create each deployment file in src/services/kubernetes
#             for f in ./src/services/kubernetes/*-deployment.yaml; do
#                 cat $f | /usr/bin/envsubst | kubectl --namespace=${<< parameters.environment >>} apply -f -
#             done

#   main_pipeline:
#     description: "Main pipeline"
#     parameters:
#       environment:
#         type: string
#     steps:
#       - setup_remote_docker
#       - setup_env
#       - checkout
#       - set_version
#       - run:
#           name: Set up persisted variables
#           command: |
#             mkdir -p ~/vars
#             echo "export DEPLOY_TARGET=<< parameters.environment >>" >> ~/vars/env
#             echo "export BUILD_VERSION=$BUILD_VERSION" >> ~/vars/env
#       - persist_to_workspace:
#           root: ~/
#           paths: vars/env
#       - build_images
#       - setup_initial_currency_data
#       - list_images
#       - run_tests

# jobs:
#   release_build:
#     docker:
#       - image: circleci/node:latest
#     steps:
#       - main_pipeline:
#           environment: dev
#       - push_images:
#           images: *push_images_list

#   patch_build:
#     docker:
#       - image: circleci/node:latest
#     steps:
#       - main_pipeline:
#           environment: none
#       - push_images:
#           images: *push_images_list

#   feature_build:
#     # docker:
#     #   - image: circleci/node:latest
#     build:
#       machine: true
#     steps:
#       - main_pipeline:
#           environment: none

#   deploy_last_build:
#     docker:
#       - image: google/cloud-sdk
#     steps:
#       - attach_workspace:
#           at: ~/
#       - checkout
#       - run:
#           name: "Install required OS dependencies"
#           command: |
#             apt-get install gettext -qy
#       - run:
#           name: "Retrieve deployment parameters"
#           command: |
#             source ~/vars/env
#             echo "Loaded deploy params from last release_build."
#             echo "BUILD_VERSION=$BUILD_VERSION"
#             echo "DEPLOY_TARGET=$DEPLOY_TARGET"
#             echo "export BUILD_VERSION=$BUILD_VERSION" >> $BASH_ENV
#             echo "export DEPLOY_TARGET=$DEPLOY_TARGET" >> $BASH_ENV
#       - deploy_to_environment:
#           version: BUILD_VERSION
#           environment: DEPLOY_TARGET

#   deploy_version_from_env_tag:
#     docker:
#       - image: google/cloud-sdk
#     steps:
#       - checkout
#       - run:
#           name: "Install required OS dependencies"
#           command: |
#             apt-get install gettext -qy
#       - run:
#           name: "Parse tags"
#           command: |
#             echo "Parsing current commit tags. Looking for version and requested environment."

#             echo "Environment is found via env-* tags"
#             ENVIRONMENT_TAGS=$(git tag -l --points-at HEAD env-*)
#             echo "Current env-* tags: $ENVIRONMENT_TAGS"
#             echo "Requested tag via CircleCI: $CIRCLE_TAG"
#             DEPLOY_TARGET=${CIRCLE_TAG/env-/}
#             echo "DEPLOY_TARGET: $DEPLOY_TARGET"

#             echo "Build version is found via git describe"
#             BUILD_VERSION=$(git describe)
#             echo "BUILD_VERSION: $BUILD_VERSION"

#             if [[ "$BUILD_VERSION" = "" ]] ; then
#                 echo "Could not generate a valid version for this commit via git describe. Are there any annotated tags in the repo?"
#                 circleci-agent step halt
#             fi

#             echo "export BUILD_VERSION=$BUILD_VERSION" >> $BASH_ENV
#             echo "export DEPLOY_TARGET=$DEPLOY_TARGET" >> $BASH_ENV
#       - deploy_to_environment:
#           version: BUILD_VERSION
#           environment: DEPLOY_TARGET

# workflows:
#   version: 2.1
#   main:
#     jobs:
#       - patch_build:
#           filters:
#             branches:
#               only: /^release\/.*/

#       - release_build:
#           filters:
#             branches:
#               only: master
#             tags:
#               # build for version tags starting with 'v', matching rudimentary semver rules
#               # note that docker tags does not support '+' characters, only '-'
#               only: /^v\d+(?:\.\d+){1,2}(?:-[a-zA-Z0-9-\.]+)?$/

#       - deploy_last_build:
#           requires:
#             - release_build
#           filters:
#             branches:
#               only: master

#       - feature_build:
#           filters:
#             branches:
#               ignore:
#                 - master
#                 - /^release\/.*/

#       - deploy_version_from_env_tag:
#           filters:
#             branches:
#               ignore: /.*/  # only run on matching tag
#             tags:
#               only: /^env-.*/
