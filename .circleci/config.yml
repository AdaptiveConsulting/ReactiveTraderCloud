version: 2.1

references:
  push_images_list: &push_images_list
    client pricehistory bot nlp servers broker eventstore nginx

commands:
  setup_env:
    steps:
      - run:
          name: Install tools
          command: |
            sudo npm i -g semver@6.3.0
            sudo apt-get install gettext-base
      - run:
          name: Setup git
          command: |
            git config --global user.email "${GIT_AUTHOR_NAME}"
            git config --global user.name “${GIT_EMAIL}”
      - run:
          name: Default docker user
          command: |
            # For fork PRs set the docker user to adaptive
            echo "export DOCKER_USER=${DOCKER_USER:-adaptive}" >> $BASH_ENV
      - add_ssh_keys:
          # For push commands pack to github
          fingerprints:
            - "79:e8:92:e2:cb:49:2b:26:2d:d5:f9:6f:7b:f7:46:b6"

  semver:
    description: "Setup semver version for this release"
    parameters:
      bump:
        default: "minor"
        description: The semver bump type. Must be one of "major", "minor", "patch".
        type: enum
        enum: ["major", "minor", "patch", "prerelease"]
    steps:
      - run:
          name: Semver Versioning "<< parameters.bump >>"
          command: |
            PREVIOUS_TAG="$(semver $(git tag --merged) 1.0.0 | tail -n -1)"
            NEW_TAG="$(semver -i << parameters.bump >> ${PREVIOUS_TAG})"
            echo "export BUILD_VERSION=$NEW_TAG" >> $BASH_ENV
            git tag $NEW_TAG -a -m "v$NEW_TAG"
            echo "Created new tag: $(git describe --abbr=0)"

  build_images:
    description: "Build the deployable container images"
    steps:
      - run:
          name: Build Images
          command: docker-compose -f ./src/docker-compose.yml -f ./src/docker-compose.deploy.yml build

  setup_initial_currency_data:
    steps:
      - run:
          name: Setup initial currencies
          command: |
            # The eventstore should have a clean set of data, which is populated via the servers
            docker-compose -f src/docker-compose.yml run servers
            docker commit eventstore_base ${DOCKER_USER}/eventstore:${BUILD_VERSION}

  run_tests:
    description: "Runs the integration tests"
    steps:
      - run:
          name: Integration Tests
          command: docker-compose -f ./src/docker-compose.e2e.yml -f ./src/docker-compose.yml run integration
      - run:
          name: e2e Tests
          command: docker-compose -f ./src/docker-compose.e2e.yml -f ./src/docker-compose.yml run e2e

  list_images:
    steps:
      - run:
          name: List images
          command: docker images -a

  push_images:
    parameters:
      images:
        type: string
    steps:
      - run:
          name: Push Images
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            docker-compose \
              -f src/docker-compose.deploy.yml -f src/docker-compose.yml \
              push << parameters.images >>
            echo "Pushing new tag to remote"
            git push origin $BUILD_VERSION

  deploy_to_environment:
    description: "Deploy the specific version to gcloud"
    parameters:
      version:
        description: The environment variable specifiying the version to deploy. Must already be hosted on dockerhub
        type: env_var_name
      environment:
        description: The environment variable containing the environment to deploy to. One of "dev", "demo"
        type: env_var_name
    steps:
      - run:
          name: "Deployment information"
          command: |
            echo "Deploying $BUILD_VERSION -> $DEPLOY_TARGET"
      - run:
          name: Authenticate with gcloud
          command: |
            echo $BASH_ENV
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud config set project ${GOOGLE_PROJECT_ID}
            gcloud config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud container clusters get-credentials cluster
      - run:
          name: Updating deployment definition to new images
          command: |
            # TODO: create new environment automatically
            # Update/create each deployment file in src/services/kubernetes
            for f in ./src/services/kubernetes/*-deployment.yaml; do
                cat $f | envsubst | kubectl --namespace=${<< parameters.environment >>} apply -f
            done

  main_pipeline:
    description: "Main pipeline"
    parameters:
      bump:
        description: The semver bump type. Must be one of "major", "minor", "patch".
        type: enum
        enum: ["major", "minor", "patch", "prerelease"]
      environment:
        type: string
    steps:
      - setup_remote_docker
      - setup_env
      - checkout
      - semver:
          bump: << parameters.bump >>
      - run:
          name: Set up persisted variables
          command: |
            mkdir -p ~/vars
            echo "export DEPLOY_TARGET=<< parameters.environment >>" >> ~/vars/env
            echo "export BUILD_VERSION=$BUILD_VERSION" >> ~/vars/env
      - persist_to_workspace:
          root: ~/
          paths: vars/env
      - build_images
      - setup_initial_currency_data
      - list_images
      - run_tests


jobs:
  release_build:
    docker:
      - image: circleci/node:latest
    steps:
      - main_pipeline:
          bump: minor
          environment: dev

  patch_build:
    docker:
      - image: circleci/node:latest
    steps:
      - main_pipeline:
          bump: patch
          environment: none

  feature_build:
    docker:
      - image: circleci/node:latest
    steps:
      - main_pipeline:
          bump: prerelease
          environment: none

  notify_about_merge_to_master:
    docker:
      - image: circleci/node:latest
    steps:
      - run:
          name: "Notify branches that master has a commit"
          command: |
            TARGET_ORIGIN="sizov"
            TARGET_BRANCH="master"

            git_data=$(curl https://api.github.com/repos/sizov/ReactiveTraderCloud/pulls\?state=open\?access_token\=${GIT_API_USER_TOKEN})
            PR_BRANCHES=$( grep -oP "(?<=\"label\": \"${TARGET_ORIGIN}:).*?(?=\")" \<<< $git_data | sort -u)

            for branch in $PR_BRANCHES
            do
              if [ "$branch" != $TARGET_BRANCH ]; then
                echo "Triggering build on branch: ${branch}"
                echo "\"branch\": \"${branch}\""
                     curl -u ${CIRCLE_API_USER_TOKEN}: -X POST --header "Content-Type: application/json" -d "{
                       \"branch\": \"${branch}\"
                     }" https://circleci.com/api/v2/project/github/sizov/ReactiveTraderCloud/pipeline
              fi
            done

  deploy_last_build:
    docker:
      - image: google/cloud-sdk
    steps:
      - attach_workspace:
          at: ~/
      - checkout
      - run:
          name: "Retrieve deployment parameters"
          command: |
            source ~/vars/env
            echo "Loaded deploy params from last release_build."
            echo "BUILD_VERSION=$BUILD_VERSION"
            echo "DEPLOY_TARGET=$DEPLOY_TARGET"
            echo "export BUILD_VERSION=$BUILD_VERSION" >> $BASH_ENV
            echo "export DEPLOY_TARGET=$DEPLOY_TARGET" >> $BASH_ENV
      - deploy_to_environment:
          version: BUILD_VERSION
          environment: DEPLOY_TARGET

  deploy_version_from_env_tag:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - run:
          name: "Parse tags"
          command: |
            echo "Parsing current commit tags. Looking for version and requested environment."

            echo "Environment is found via env-* tags"
            ENVIRONMENT_TAG=$(git tag -l --points-at HEAD env-*)
            DEPLOY_TARGET=${ENVIRONMENT_TAG/env-/}
            echo "DEPLOY_TARGET: $DEPLOY_TARGET"

            echo "Build version is found via semver tag"
            BUILD_VERSION=$(git tag -l --points-at HEAD | grep ^[0-9+]\.)
            echo "BUILD_VERSION: $BUILD_VERSION"

            if [[ "$BUILD_VERSION" = "" ]] ; then
                echo "Could not find a valid version on this commit. Was the semver tag on the same tag as the env-* one?"
                circleci-agent step halt
            fi

            echo "export BUILD_VERSION=$BUILD_VERSION" >> $BASH_ENV
            echo "export DEPLOY_TARGET=$DEPLOY_TARGET" >> $BASH_ENV
      - deploy_to_environment:
          version: BUILD_VERSION
          environment: DEPLOY_TARGET

workflows:
  version: 2.1
  main:
    jobs:
      - patch_build:
          filters:
            branches:
              only: /^release\/.*/

      - release_build:
          filters:
            branches:
              only: master

      - notify_about_merge_to_master:
          filters:
            branches:
              only: master

      - feature_build:
          filters:
            branches:
              ignore:
                - master
                - /^release\/.*/

      - deploy_version_from_env_tag:
          filters:
            branches:
              ignore: /.*/  # only run on matching tag
            tags:
              only: /^env-.*/


# - use env var to see if you are on a branch that has PR (when param or inline in command)
# - launch build for all existing branches - ones that do not have PRs will auto-cancel themselves
