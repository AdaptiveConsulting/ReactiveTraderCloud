
  setup:
    docker:
      - image: docker:edge-git
    steps:
      - checkout
      - run:
          name: semver_minor
          command: |
            LAST_TAG="$(git describe --tags)"
            echo "Original tag: $LAST_TAG"
            NEW_TAG="$(./semver bump minor ${LAST_TAG} || echo 1.0.0)"
            echo "New Tag: $NEW_TAG"
            echo "export BUILD_VERSION=$NEW_TAG" >> ~/.profile
            git tag $NEW_TAG
            echo "Created new tag: $(git describe --tags)"
      - run:
          name: 'Install Tools'
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
  compose_test:
    machine:
      enabled: true
    steps:
      - checkout
      - run:
          name: semver_minor
          command: |
            LAST_TAG="$(git describe --tags)"
            echo "Original tag: $LAST_TAG"
            NEW_TAG="$(./semver bump minor ${LAST_TAG} || echo 1.0.0)"
            echo "New Tag: $NEW_TAG"
            echo "export BUILD_VERSION=$NEW_TAG" >> $BASH_ENV
            echo "export DOCKER_USER=$DOCKER_USER" >> $BASH_ENV
            git tag $NEW_TAG
            echo "Created new tag: $(git describe --tags)"
      - run:
          name: 'Install Tools'
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - run:
          name: 'Build Images'
          command: |
            docker-compose \
              # -f ./src/docker-compose.yml \
              -f ./src/docker-compose.deploy.yml \
              build --parallel eventstore servers
      - run:
          name: 'Server Integration Tests'
          command: |
            docker-compose \
              -f ./src/docker-compose.yml \
              run \
              --use-aliases
              --name test \
              servers \
              dotnet vstest ./Adaptive.ReactiveTrader.Server.IntegrationTests.dll

      - run:
          name: Skip this job for Pull Requests
          command: '[[ -v CIRCLE_PR_NUMBER ]] && circleci step halt || true'

      - run:
          name: 'Push To DockerHub'
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            # docker push ${DOCKER_USER}/client:${TMP_BUILD_NUM}
            # docker push ${DOCKER_USER}/pricehistory:${TMP_BUILD_NUM}
            # docker push ${DOCKER_USER}/bot:${TMP_BUILD_NUM}
            # docker push ${DOCKER_USER}/nlp:${TMP_BUILD_NUM}
            # docker push ${DOCKER_USER}/servers:${TMP_BUILD_NUM}
            # docker push ${DOCKER_USER}/broker:${TMP_BUILD_NUM}
            # docker push ${DOCKER_USER}/eventstore:${TMP_BUILD_NUM}
            # docker push ${DOCKER_USER}/nginx:${TMP_BUILD_NUM}
            # docker push ${DOCKER_USER}/smoketest:${TMP_BUILD_NUM}

            docker-compose -f src/docker-compose.yml push client pricehistory bot nlp servers broker eventstore nginx


  build_and_test:
    machine:
      enabled: true
    steps:
      - run:
          name: 'local build setup'
          command: |
            # Only needed when running the local circleci cli
            if [[ ${CIRCLE_SHELL_ENV} =~ "localbuild" ]]; then
              mkdir -p /tmp/_circleci_local_build_repo
            fi
      - checkout
      - run:
          name: 'Configure the environment'
          command: |
            # Inject a dummy user for builds triggered from forks, because secure variables are not available there.
            # This allows the job to proceed with building and testing docker images.
            if [[ -n "${CIRCLE_PR_REPONAME}" ]] ; then
              echo 'export DOCKER_USER=adaptive' >> $BASH_ENV
            fi
      - run:
          name: Create network
          command: 'docker network create -d bridge circleci'
      - run:
          name: Build client
          command: 'cd ./src/client  && docker build -t ${DOCKER_USER}/client:${TMP_BUILD_NUM} .'
      - run:
          name: Build servers
          command: 'cd ./src/server && docker build -t ${DOCKER_USER}/servers:${TMP_BUILD_NUM} .'
      - run:
          name: Build nginx
          command: 'cd ./src/services/nginx  && docker build -t ${DOCKER_USER}/nginx:${TMP_BUILD_NUM} .'
      - run:
          name: Build broker
          command: 'cd ./src/services/broker  && docker build -t ${DOCKER_USER}/broker:${TMP_BUILD_NUM} .'
      - run:
          name: Build eventstore
          command: 'cd ./src/services/eventstore  && docker build -t ${DOCKER_USER}/baseeventstore .'
      - run:
          name: Build pricehistory
          command: 'cd ./src/server/Adaptive.ReactiveTrader.Server.PriceHistory/ && docker build -t ${DOCKER_USER}/pricehistory:${TMP_BUILD_NUM} .'
      - run:
          name: Build bot
          command: 'cd ./src/server/Adaptive.ReactiveTrader.Server.Bot/ && docker build -t ${DOCKER_USER}/bot:${TMP_BUILD_NUM} .'
      - run:
          name: Build nlp
          command: 'cd ./src/node-server/ && docker build -t ${DOCKER_USER}/nlp:${TMP_BUILD_NUM} -f ./Nlp.Dockerfile .'
      - run:
          name: Build smoketest
          command: 'cd ./src/client-tests/ && docker build -t ${DOCKER_USER}/smoketest:${TMP_BUILD_NUM} .'
      #Â RUN commands
      - run:
          name: Run broker
          command: 'docker run -d --net circleci --name broker ${DOCKER_USER}/broker:${TMP_BUILD_NUM}'
      - run:
          name: Run eventstore
          command: 'docker run -d --net circleci --name eventstore ${DOCKER_USER}/baseeventstore'
      - run:
          name: Populate eventstore
          command: 'docker run --net circleci --name servers ${DOCKER_USER}/servers:${TMP_BUILD_NUM} dotnet ./Adaptive.ReactiveTrader.Server.Launcher.dll config.prod.json --populate-eventstore'
      - run:
          name: Save eventstore
          command: 'docker commit eventstore ${DOCKER_USER}/eventstore:${TMP_BUILD_NUM}'
      - run:
          name: Run analytics
          command: 'docker run -d --net circleci --name analytics ${DOCKER_USER}/servers:${TMP_BUILD_NUM} dotnet ./Adaptive.ReactiveTrader.Server.Analytics.dll config.prod.json'
      - run:
          name: Run pricing
          command: 'docker run -d --net circleci --name pricing ${DOCKER_USER}/servers:${TMP_BUILD_NUM} dotnet ./Adaptive.ReactiveTrader.Server.Pricing.dll config.prod.json'
      - run:
          name: Run referencedataread
          command: 'docker run -d --net circleci --name referencedataread ${DOCKER_USER}/servers:${TMP_BUILD_NUM} dotnet ./Adaptive.ReactiveTrader.Server.ReferenceDataRead.dll config.prod.json'
      - run:
          name: Run tradeexecution
          command: 'docker run -d --net circleci --name tradeexecution ${DOCKER_USER}/servers:${TMP_BUILD_NUM} dotnet ./Adaptive.ReactiveTrader.Server.TradeExecution.dll config.prod.json'
      - run:
          name: Run blotter
          command: 'docker run -d --net circleci --name blotter ${DOCKER_USER}/servers:${TMP_BUILD_NUM} dotnet ./Adaptive.ReactiveTrader.Server.Blotter.dll config.prod.json'
      - run:
          name: Run nginx
          command: 'docker run -d --net circleci -p 80:80 --name nginx ${DOCKER_USER}/nginx:${TMP_BUILD_NUM}'
      - run:
          name: Run client
          command: 'docker run -d --net circleci --name client ${DOCKER_USER}/client:${TMP_BUILD_NUM}'
      - run:
          name: List containers
          command: 'docker ps'
      - run:
          name: Print container logs
          command: 'docker ps -q -a | xargs -t -L 1 docker logs'
      - run:
          name: Run server tests
          command: 'docker run --net circleci --name tests ${DOCKER_USER}/servers:${TMP_BUILD_NUM} dotnet vstest ./Adaptive.ReactiveTrader.Server.IntegrationTests.dll'
      # - run:
      #     name: Build client tests
      #     command: 'cd ./src/client && docker build -t ${DOCKER_USER}/client-test:${TMP_BUILD_NUM} -f ./Dockerfile.dev .'
      # - run:
      #     name: Run client tests
      #     command: 'docker run -e CI=true ${DOCKER_USER}/client-test:${TMP_BUILD_NUM} npm run test -- --coverage'
      - run:
          name: 'Run e2e tests'
          command: |
            set +e
            docker run --net circleci --name smoketest -t ${DOCKER_USER}/smoketest:${TMP_BUILD_NUM} sh -c "sleep 30 && npm run e2e -- --chromeDriver=/usr/bin/chromedriver --baseUrl=http://nginx"
      - run:
          name: 'Output smoke test results'
          command: 'docker log smoketest'
      - run:
          name: 'Wait'
          command: 'sleep 60000'
      - run:
          name: 'Skip the next steps for PRs'
          command: |
            # Check the environment and gracefully stop the job for PRs
            if [[ "$CIRCLE_BRANCH" != "master" ]] && [[ "$CIRCLE_BRANCH" != "develop" ]] ; then
              circleci-agent step halt
            fi
      - run:
          name: Push images to dockerhub
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            docker push ${DOCKER_USER}/client:${TMP_BUILD_NUM}
            docker push ${DOCKER_USER}/pricehistory:${TMP_BUILD_NUM}
            docker push ${DOCKER_USER}/bot:${TMP_BUILD_NUM}
            docker push ${DOCKER_USER}/nlp:${TMP_BUILD_NUM}
            docker push ${DOCKER_USER}/servers:${TMP_BUILD_NUM}
            docker push ${DOCKER_USER}/broker:${TMP_BUILD_NUM}
            docker push ${DOCKER_USER}/eventstore:${TMP_BUILD_NUM}
            docker push ${DOCKER_USER}/nginx:${TMP_BUILD_NUM}
            docker push ${DOCKER_USER}/smoketest:${TMP_BUILD_NUM}
      - run:
          name: Store build number
          command: |
            mkdir -p envs
            echo "export BUILD_NUM=${TMP_BUILD_NUM}" >> envs/env_build_num
      - persist_to_workspace:
          root: envs
          paths:
            - env_build_num

  deploy:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - attach_workspace:
          at: /envs
      - run:
          name: Restore build number
          command: cat /envs/env_build_num >> $BASH_ENV;
      - run:
          name: Authenticate with gcloud
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud config set project ${GOOGLE_PROJECT_ID}
            gcloud config set compute/zone ${GOOGLE_COMPUTE_ZONE}
            gcloud container clusters get-credentials cluster
      - run:
          name: Set namespace
          command: declare -A envs=( ["develop"]="dev" ["master"]="demo"); echo "export NAMESPACE='${envs[$CIRCLE_BRANCH]}'" >> $BASH_ENV;
      - run:
          name: Update images
          command: |
            kubectl --namespace=${NAMESPACE} set image deployments/broker-deployment broker=${DOCKER_USER}/broker:${1.168.0}
            kubectl --namespace=${NAMESPACE} set image deployments/eventstore-deployment eventstore=${DOCKER_USER}/eventstore:${BUILD_NUM}
            kubectl --namespace=${NAMESPACE} set image deployments/web-deployment web=${DOCKER_USER}/nginx:${BUILD_NUM}
            kubectl --namespace=${NAMESPACE} set image deployments/client-deployment client=${DOCKER_USER}/client:${BUILD_NUM}
            kubectl --namespace=${NAMESPACE} set image deployments/referencedataread-deployment referencedataread=${DOCKER_USER}/servers:${BUILD_NUM}
            kubectl --namespace=${NAMESPACE} set image deployments/pricing-deployment pricing=${DOCKER_USER}/servers:${BUILD_NUM}
            kubectl --namespace=${NAMESPACE} set image deployments/tradeexecution-deployment tradeexecution=${DOCKER_USER}/servers:${BUILD_NUM}
            kubectl --namespace=${NAMESPACE} set image deployments/analytics-deployment analytics=${DOCKER_USER}/servers:${BUILD_NUM}
            kubectl --namespace=${NAMESPACE} set image deployments/blotter-deployment blotter=${DOCKER_USER}/servers:${BUILD_NUM}
            kubectl --namespace=${NAMESPACE} set image deployments/tradeexecution-deployment tradeexecution=${DOCKER_USER}/servers:${BUILD_NUM}
            kubectl --namespace=${NAMESPACE} set image deployments/pricehistory-deployment pricehistory=${DOCKER_USER}/pricehistory:${BUILD_NUM}
            kubectl --namespace=${NAMESPACE} set image deployments/bot-deployment bot=${DOCKER_USER}/bot:${BUILD_NUM}

# workflows:
#   version: 2
#   main:
#     jobs:
#       - build_and_test
#       - deploy:
#           requires:
#             - build_and_test
#           filters:
#             branches:
#               only:
#                 - master
#                 - develop
