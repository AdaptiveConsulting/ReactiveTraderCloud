#!/bin/bash
NAME=${1}

root_directory="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/../.."

if [[ "${NAME}" == "" ]]
then
    echo -e "\e[32mUsage:\e[39m"
    echo "  $0 minikube|cluster|dev"
    echo " "
    echo "existing cluster names:"
    echo " - minikube: local kubernetes"
    . ${root_directory}/deploy/googleCloudEngine/showClusters.sh
    showClusters
    exit 1
fi

# Config and scripts
kubectl="${root_directory}/deploy/clis/kubectl"
getCredentials="${root_directory}/deploy/googleCloudEngine/getCredentials"
. ${root_directory}/deploy/config

if [[ "${NAME}" == "dev" || "${NAME}" == "cluster" ]]
then    CLUSTER_NAME=gke_${kube_project}\_${kube_zone}\_${NAME}
else    CLUSTER_NAME=${NAME}
fi

EXISTS=`${kubectl} config view | grep "name: ${CLUSTER_NAME}" | wc -l`
if [[ "${EXISTS}" -gt "0" ]]
then
    ${kubectl} config use-context ${CLUSTER_NAME}
else
    # USE OF ADAPTIVE GCLOUD CLUSTERS
    if [[ "${NAME}" == "cluster" || "${NAME}" == "dev" ]]
    then
        ${getCredentials} ${NAME}
    fi

    # USE OF MINIKUBE
    if [[ "${CLUSTER_NAME}" == "minikube" ]]
    then
        minikube_data_directory="deploy/minikube/minikube_data"
        minikube_ip=$(cat ${root_directory}/${minikube_data_directory}/minikube_ip)
        ${root_directory}/deploy/clis/kubectl config set-cluster minikube \
            --certificate-authority=//root_directory/${minikube_data_directory}/ca.crt \
            --server=https://${minikube_ip}:8443

        ${root_directory}/deploy/clis/kubectl config set-context minikube \
            --cluster=minikube \
            --user=minikube

        ${root_directory}/deploy/clis/kubectl config set-credentials minikube \
            --client-key=//root_directory/${minikube_data_directory}/apiserver.key \
            --client-certificate=//root_directory/${minikube_data_directory}/apiserver.crt
    fi

    EXISTS=`${kubectl} config view | grep "name: ${CLUSTER_NAME}" | wc -l`
    if [[ ${EXISTS} > 0 ]]
    then ${kubectl} config use-context ${CLUSTER_NAME}
    else
        echo "Can't find cluster name ${CLUSTER_NAME}"
        exit 1
    fi
fi
