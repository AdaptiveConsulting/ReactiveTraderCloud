apiVersion: networking.gke.io/v1beta1
kind: FrontendConfig
metadata:
  name: root-ingress-frontend-config
spec:
  redirectToHttps:
    enabled: true
    responseCodeName: MOVED_PERMANENTLY_DEFAULT
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: root-ingress
  annotations:
    kubernetes.io/ingress.class: "gce"
    cert-manager.io/cluster-issuer: reactive-trader-issuer
    external-dns.alpha.kubernetes.io/hostname: "*.lb.adaptivecluster.com"
    networking.gke.io/v1beta1.FrontendConfig: "root-ingress-frontend-config"
spec:
  tls:
  - hosts:
    - reactivetrader.com
    - "*.reactivetrader.com"
    - "*.adaptivecluster.com"
    - "*.lb.adaptivecluster.com"
    - "*.beta.lb.adaptivecluster.com"
    - "*.classic.lb.adaptivecluster.com"
    secretName: reactive-trader-tls

  backend:
    serviceName: gateway
    servicePort: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gateway-config
data:
  default.conf: |
    map $sent_http_content_type $expires {
      default   max;
      text/html epoch;
    }

    server {
      listen 8080;
      server_name reactivetrader.com;
      return 301 $scheme://www.reactivetrader.com$request_uri;
    }

    server {
      listen 8080;
      server_name ~^web-(?<namespace>(demo|uat|dev))\.adaptivecluster.com;

      if ($namespace = "demo") {
        set $namespace "www";
      }

      return 301 $scheme://$namespace.reactivetrader.com$request_uri;
    }

    server {
      listen 8080;
      server_name ~^(?<namespace>(www|classic|dev|uat))\.reactivetrader.com ~^(?<namespace>[^\.]+?)\.((beta|classic)\.)?lb.adaptivecluster.com$;
      resolver kube-dns.kube-system.svc.cluster.local valid=5s;

      set $client_upstream "client";

      if ($namespace = "www") {
        set $namespace "demo";
      }

      if ($namespace = "classic") {
        set $namespace "demo";
        set $client_upstream "client";
      }

      if ($host ~ "^[^\.]+\.beta\.") {
        set $client_upstream "new-client";
      }

      if ($host ~ "^[^\.]+\.classic\.") {
        set $client_upstream "client";
      }

      expires $expires;

      gzip on;
      gzip_buffers 16 8k;
      gzip_comp_level 6;
      gzip_types text/plain text/html text/css application/javascript application/json;
      gzip_proxied any;

      brotli on;
      brotli_comp_level 6;
      brotli_types text/plain text/html text/css application/javascript application/json;

      proxy_http_version 1.1;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      location /ws {
        proxy_pass http://broker.$namespace.svc.cluster.local:15674/ws;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
      }

      location / {
        proxy_pass http://$client_upstream.$namespace.svc.cluster.local:3000$request_uri;
      }
    }

    server {
      listen 8080 default_server;

      location /healthz {
        return 200;
      }

      location / {
        return 200;
      }
    }
---
apiVersion: cloud.google.com/v1beta1
kind: BackendConfig
metadata:
  name: gateway-backend-config
spec:
  timeoutSec: 86400
---
apiVersion: v1
kind: Service
metadata:
  name: gateway
  annotations:
    beta.cloud.google.com/backend-config: '{"default": "gateway-backend-config"}'
spec:
  selector:
    component: gateway
  ports:
  - name: gateway
    port: 80
    targetPort: 8080
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      component: gateway
  template:
    metadata:
      labels:
        component: gateway
    spec:
      containers:
      - name: nginx
        image: macbre/nginx-brotli:1.19.7
        ports:
          - containerPort: 8080
        resources:
          requests:
            memory: "10M"
            cpu: "15m"
        volumeMounts:
        - name: gateway-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
        readinessProbe:
          httpGet:
            port: 8080
            path: /healthz
        livenessProbe:
          httpGet:
            port: 8080
            path: /healthz
      volumes:
      - name: gateway-config
        configMap: 
          name: gateway-config
