import styled from "styled-components"

import { TileStates } from "@/App/LiveRates/Tile/Tile.state"
import { PriceMovementType } from "@/services/prices"

import { H3 } from "../elements"
import { Tile, TileProps } from "./Tile"

const Grid = styled.div`
  display: grid;
  grid-template-columns: 120px 345px 345px;
  grid-column-gap: 43px;
  grid-row-gap: 17px;
`
const Cell = styled.div`
  display: grid;
  grid-template-rows: 15px 175px;
  grid-row-gap: 9px;
`
const FxSpot = styled.div`
  grid-row: 1 / span 2;
`
const FxRfq = styled.div`
  grid-row: 4 / span 4;
`
const Separator = styled.hr`
  grid-column: 1 / -1;
  border: none;
  border-bottom: ${({ theme }) =>
    `2px solid ${theme.core.primaryStyleGuideBackground}`};
  margin: 4rem 0;
`

const currencyPair = {
  symbol: "EURUSD",
  ratePrecision: 5,
  pipsPosition: 4,
  base: "EUR",
  terms: "USD",
  defaultNotional: 1000000,
}

const BASE_FX_SPOT_PROPS = {
  currencyPair,
  isAnalytics: false,
  notional: "1,000,000",
  priceMovement: "0.8",
  priceMovementType: PriceMovementType.DOWN,
  sellPrice: 1.36269,
  buyPrice: 1.36279,
  tileState: { status: TileStates.Ready },
} as TileProps

const FX_SPOT: {
  title: string
  props: TileProps
}[] = [
  {
    title: "Normal",
    props: BASE_FX_SPOT_PROPS,
  },
  {
    title: "Hover",
    props: {
      ...BASE_FX_SPOT_PROPS,
      hover: true,
    },
  },
  {
    title: "Price Unavailable",
    props: {
      ...BASE_FX_SPOT_PROPS,
      priceMovement: "--",
      priceMovementType: undefined,
      sellPrice: undefined,
      buyPrice: undefined,
      disabledNotional: true,
    },
  },
  {
    title: "Executing",
    props: {
      ...BASE_FX_SPOT_PROPS,
      tileState: { status: TileStates.Started },
      disabledNotional: true,
      priceDisabled: true,
    },
  },
]

const BASE_FX_RFQ_PROPS = {
  currencyPair: currencyPair,
  isAnalytics: false,
  notional: "1,000,000",
  priceMovement: "0.8",
  priceMovementType: PriceMovementType.DOWN,
  tileState: { status: TileStates.Ready },
  sellPrice: 1.36269,
  buyPrice: 1.36279,
  isRfq: true,
} as TileProps

const NOW = new Date().getTime()

const FX_RFQ: {
  title: string
  props: TileProps
}[] = [
  {
    title: "Begin Price Request",
    props: {
      ...BASE_FX_RFQ_PROPS,
      rfqTextWrap: true,
      rfqButtonText: "Initiate RFQ",
    },
  },
  {
    title: "Awaiting Price",
    props: {
      ...BASE_FX_RFQ_PROPS,
      rfqTextWrap: true,
      rfqButtonText: "Cancel RFQ",
      disabledNotional: true,
    },
  },
  {
    title: "Price Announced",
    props: {
      ...BASE_FX_RFQ_PROPS,
      timerData: {
        start: NOW,
        end: NOW + 60,
      },
      staticProgressWidth: 100,
      priceButtonStatic: true,
    },
  },
  {
    title: "Priced",
    props: {
      ...BASE_FX_RFQ_PROPS,
      disabledNotional: true,
      timerData: {
        start: NOW,
        end: NOW + 49,
      },
      staticProgressWidth: 80,
    },
  },
  {
    title: "Priced Hover",
    props: {
      ...BASE_FX_RFQ_PROPS,
      disabledNotional: true,
      timerData: {
        start: NOW,
        end: NOW + 49,
      },
      staticProgressWidth: 80,
      hover: true,
    },
  },
  {
    title: "Price Expired",
    props: {
      ...BASE_FX_RFQ_PROPS,
      canResetNotional: true,
      rfqButtonText: "Requote",
      isExpired: true,
      priceDisabled: true,
    },
  },
]

const PATH =
  "M0,87.2215909090776L0.5272108843537414,87.559659090898C1.0544217687074828,87.8977272727184,2.1088435374149657,88.57386363635919,3.1632653061224487,88.9119318181796C4.217687074829931,89.25,5.272108843537414,89.25,6.326530612244897,87.5596590909055C7.3809523809523805,85.86931818181101,8.435374149659864,82.48863636362204,9.489795918367347,82.15056818180163C10.544217687074829,81.81249999998123,11.598639455782312,84.51704545452942,12.653061224489797,82.48863636362204C13.70748299319728,80.46022727271465,14.761904761904761,73.6988636363517,15.816326530612246,71.33238636362391C16.87074829931973,68.96590909089612,17.92517006802721,70.99431818180351,18.979591836734695,72.0085227272572C20.03401360544218,73.0227272727109,21.088435374149658,73.0227272727109,22.142857142857142,72.684659090898C23.197278911564624,72.34659090908511,24.25170068027211,71.67045454545932,25.30612244897959,70.99431818182603C26.360544217687075,70.31818181819274,27.41496598639456,69.64204545455193,28.469387755102037,70.31818181818524C29.523809523809522,70.99431818181853,30.578231292517007,73.0227272727259,31.632653061224488,73.3607954545463C32.68707482993197,73.69886363636671,33.74149659863945,72.34659090910013,34.795918367346935,70.31818181819274C35.85034013605442,68.28977272728535,36.904761904761905,65.58522727273716,37.95918367346939,61.866477272735295C39.013605442176875,58.14772727273341,40.06802721088436,53.41477272727784,41.12244897959184,52.06250000000375C42.176870748299315,50.71022727272967,43.23129251700681,52.738636363637056,44.285714285714285,56.11931818181853C45.34013605442177,59.5,46.394557823129254,64.23295454545557,47.44897959183674,63.89488636363517C48.50340136054422,63.55681818181477,49.557823129251695,58.147727272718406,50.61224489795919,53.07670454544243C51.666666666666664,48.005681818166465,52.72108843537415,43.27272727271089,53.775510204081634,40.23011363634981C54.82993197278912,37.18749999998874,55.8843537414966,35.83522727272215,56.938775510204074,36.849431818175844C57.993197278911566,37.86363636362953,59.047619047619044,41.2443181818035,60.10204081632653,43.27272727271089C61.156462585034014,45.30113636361828,62.2108843537415,45.97727272725907,63.26530612244898,46.315340909079474C64.31972789115646,46.65340909089988,65.37414965986395,46.65340909089988,66.42857142857143,47.329545454540664C67.48299319727892,48.00568181818147,68.53741496598639,49.357954545463066,69.59183673469387,50.710227272737164C70.64625850340136,52.062500000011255,71.70068027210884,53.41477272727784,72.75510204081633,55.10511363636484C73.80952380952381,56.795454545451825,74.8639455782313,58.8238636363592,75.91836734693878,56.45738636363142C76.97278911564626,54.09090909090363,78.02721088435374,47.32954545454067,79.08163265306122,42.258522727272215C80.1360544217687,37.18750000000375,81.19047619047619,33.80681818182978,82.24489795918367,30.088068181827907C83.29931972789116,26.36931818182603,84.35374149659863,22.31249999999625,85.40816326530613,19.94602272726846C86.4625850340136,17.579545454540675,87.51700680272108,16.903409090914888,88.57142857142856,17.57954545455569C89.62585034013607,18.255681818196486,90.68027210884354,20.28409090910387,91.73469387755102,20.622159090916764C92.78911564625851,20.960227272729657,93.84353741496598,19.60795454544806,94.89795918367348,19.60795454544806C95.95238095238096,19.60795454544806,97.00680272108843,20.960227272729657,98.06122448979592,20.622159090916764C99.11564625850339,20.28409090910387,100.17006802721089,18.255681818196486,101.22448979591836,19.60795454547058C102.27891156462584,20.960227272744675,103.33333333333333,25.693181818200244,104.3877551020408,26.03125000001314C105.4421768707483,26.36931818182603,106.49659863945578,22.31249999999625,107.55102040816325,20.284090909081353C108.60544217687077,18.25568181816646,109.65986394557824,18.25568181816646,110.71428571428572,16.90340909089237C111.76870748299321,15.551136363618278,112.82312925170068,12.846590909070096,113.87755102040815,13.522727272710895C114.93197278911565,14.198863636351694,115.98639455782313,18.255681818181476,117.0408163265306,20.622159090909257C118.09523809523809,22.988636363637042,119.14965986394559,23.66477272726283,120.20408163265307,25.355113636349817C121.25850340136054,27.0454545454368,122.31292517006803,29.749999999984983,123.3673469387755,31.77840909089988C124.421768707483,33.80681818181477,125.47619047619048,35.15909090909637,126.53061224489795,34.82102272728348C127.58503401360547,34.482954545470584,128.63945578231292,32.4545454545632,129.69387755102042,29.750000000015017C130.74829931972792,27.04545454546683,131.8027210884354,23.664772727277846,132.85714285714286,19.946022727275967C133.91156462585033,16.22727272727409,134.96598639455783,12.170454545459322,136.0204081632653,9.803977272731537C137.07482993197277,7.437500000003752,138.12925170068027,6.761363636362954,139.18367346938774,6.423295454542554C140.2380952380952,6.085227272722155,141.29251700680274,6.085227272722155,142.3469387755102,5.0710227272684625C143.40136054421768,4.05681818181477,144.45578231292518,2.028409090907385,145.51020408163265,2.704545454540678C146.56462585034012,3.380681818173971,147.61904761904762,6.761363636347942,148.6734693877551,12.170454545436803C149.72789115646256,17.579545454525665,150.7823129251701,25.01704545452942,151.83673469387756,30.426136363625783C152.89115646258503,35.83522727272216,153.94557823129253,39.21590909091114,154.47278911564626,40.906250000005635L155,42.59659090910013"

const SpotTilesGrid = () => (
  <>
    <H3>Trading Tiles - Horizontal</H3>
    <Grid>
      <FxSpot>FX Spot</FxSpot>
      {FX_SPOT.map((item, i) => (
        <Cell key={i}>
          <span>{item.title}</span>
          <Tile {...item.props} />
        </Cell>
      ))}
      <Separator />
      <FxRfq>FX RFQ</FxRfq>
      {FX_RFQ.map((item, i) => (
        <Cell key={i}>
          <span>{item.title}</span>
          <Tile {...item.props} />
        </Cell>
      ))}
    </Grid>
    <Separator />
    <H3>Trading Tiles - Vertical</H3>
    <Grid>
      <FxSpot>FX Spot</FxSpot>
      {FX_SPOT.map((item, i) => (
        <Cell key={i}>
          <span>{item.title}</span>
          <Tile {...item.props} isAnalytics graphPath={PATH} />
        </Cell>
      ))}
      <Separator />
      <FxRfq>FX RFQ</FxRfq>
      {FX_RFQ.map((item, i) => (
        <Cell key={i}>
          <span>{item.title}</span>
          <Tile {...item.props} isAnalytics graphPath={PATH} />
        </Cell>
      ))}
    </Grid>
  </>
)

export default SpotTilesGrid
