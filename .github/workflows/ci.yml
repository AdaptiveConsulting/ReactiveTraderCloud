name: CI

on:
  push:
    branches: [build]
  pull_request:
    branches: [build]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
        DOCKER_USER: ${{ secrets.DOCKER_USER }}
        DOCKER_PASS: ${{ secrets.DOCKER_PASS }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch origin +refs/tags/*:refs/tags/*

      - name: Get build version
        run: echo ::set-env name=GIT_VERSION::$(git describe)

      - name: Print build version
        run: echo $GIT_VERSION

      # - name: Setup node
      #   uses: actions/setup-node@v1
      #   with:
      #     node-version: '12.x'

      # - name: Test client code
      #   working-directory: src/client
      #   run: |
      #     npm install
      #     npm run test -- --coverage

      - name: Build Docker images
        run: docker-compose -f ./src/docker-compose.yml build --parallel
        env:
          BUILD_VERSION: ${{ env.GIT_VERSION }}

      - name: Set up test data
        run: |
          # The eventstore should be initialised with a clean set of data
          docker-compose -f src/docker-compose.yml run initialise
          docker commit eventstore ${DOCKER_USER}/eventstore:${BUILD_VERSION}
        env:
          BUILD_VERSION: ${{ env.GIT_VERSION }}

      - name: Run integration tests
        run: docker-compose -f ./src/docker-compose.e2e.yml -f ./src/docker-compose.yml run integration
        env:
          BUILD_VERSION: ${{ env.GIT_VERSION }}

      - name: Run end-to-end tests
        run: docker-compose -f ./src/docker-compose.e2e.yml -f ./src/docker-compose.yml run e2e
        env:
          BUILD_VERSION: ${{ env.GIT_VERSION }}

      - name: Push Docker images
        if: github.ref == 'refs/heads/master'
        run: |
          echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
          docker-compose -f src/docker-compose.yml -f push

  deploy:
    runs-on: ubuntu-latest
    
    # needs: build
    
    # if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch origin +refs/tags/*:refs/tags/*

      - name: Get build version
        run: echo ::set-env name=GIT_VERSION::$(git describe)

      - name: Print build version
        run: echo $GIT_VERSION

      - name: Authenticate with Google Cloud
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '285.0.0'
          project_id: ${{ secrets.GOOGLE_PROJECT_ID }}
          service_account_key: ${{ secrets.GOOGLE_SERVICE_KEY }}

      - name: Get GKE credentials
        env:
          GOOGLE_CLUSTER: ${{ secrets.GOOGLE_CLUSTER }}
          GOOGLE_COMPUTE_ZONE: ${{ secrets.GOOGLE_COMPUTE_ZONE }}
        run: gcloud container clusters get-credentials "$GOOGLE_CLUSTER" --zone "$GOOGLE_COMPUTE_ZONE"

      - name: Downscale GKE deployments
        run: kubectl scale deploy --replicas=0 --all -n dev

      - name: Upscale GKE deployments
        run: kubectl scale deploy --replicas=1 --all -n dev

      # - name: Upscale GCP deployments
      #   uses: ameydev/gke-kubectl-action@master
      #   env:
      #     PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }}
      #     APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_SERVICE_KEY }}
      #     ZONE_NAME: us-central1-c
      #   with:
      #     args: scale deploy --replicas=1 --all -n dev