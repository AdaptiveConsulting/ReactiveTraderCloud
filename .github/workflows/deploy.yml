name: Deploy

on: deployment

env:
  DOCKER_USER: ${{ secrets.DOCKER_USER }}
  DOCKER_PASS: ${{ secrets.DOCKER_PASS }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout code: ${{ github.event.deployment.ref }}'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch origin +refs/tags/*:refs/tags/*

      - name: Get build version
        run: echo "BUILD_VERSION=$(git describe)" >> $GITHUB_ENV

      - name: Check if docker tag exists
        run: |
          echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
          DOCKER_CLI_EXPERIMENTAL=enabled docker manifest inspect $DOCKER_USER/client:$BUILD_VERSION > /dev/null

      - name: Set up Google Cloud
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '285.0.0'
          project_id: ${{ secrets.GOOGLE_PROJECT_ID }}
          service_account_key: ${{ secrets.GOOGLE_SERVICE_KEY }}

      - name: Get GKE credentials
        env:
          GOOGLE_CLUSTER: ${{ secrets.GOOGLE_CLUSTER }}
          GOOGLE_COMPUTE_ZONE: ${{ secrets.GOOGLE_COMPUTE_ZONE }}
        run: gcloud container clusters get-credentials "$GOOGLE_CLUSTER" --zone "$GOOGLE_COMPUTE_ZONE"

      - name: Downscale GKE deployments
        env:
          DEPLOY_ENV: ${{ github.event.deployment.environment }}
        run: kubectl scale deploy --replicas=0 --all --namespace $DEPLOY_ENV

      - name: Update GKE deployment definitions
        env:
          DEPLOY_ENV: ${{ github.event.deployment.environment }}
        run: |
          # TODO: create new environment automatically
          # Update/create each deployment file in src/services/kubernetes
          for f in ./src/services/kubernetes/*.yaml; do
              cat $f | /usr/bin/envsubst | kubectl --namespace=$DEPLOY_ENV apply -f -
          done

      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: ${{ secrets.DEPLOY_TOKEN }}
          state: success
          deployment_id: ${{ github.event.deployment.id }}

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: ${{ secrets.DEPLOY_TOKEN }}
          state: failure
          deployment_id: ${{ github.event.deployment.id }}
